server {  # Defines a server block that contains all configuration related to the server's behavior.
# Checks if SSL termination is not enabled.
{{ if not .Values.projectIngressProxy.settings.sslTerminated }}  
    listen 8443 ssl;  # Configures the server to listen on port 8443 and enables SSL.
{{ else }}
    listen 8443;  # If SSL termination is enabled, it listens on port 8443 without SSL.
{{ end }}

    server_name _;  # Specifies that this server block handles requests for any server name (catch-all).
    include /usr/local/project/nginx/custom/conf/project-ssl.conf;  # Includes another configuration file containing SSL-related settings.
    
    if ( $request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT)$ ) {  # Ensures that only certain HTTP methods are allowed.
      return 405 "Method Not Allowed";  # Returns a 405 error for any other HTTP methods.
    }
    
    location /test {  # Defines a location block for the /test URL path.

# Checks if publishing NGINX status is enabled.
{{ if not .Values.projectIngressProxy.settings.nginxStatusPublishDisabled }}
        allow all;  # Allows all incoming requests to access this location.
{{ else }}
        allow 127.0.0.1/32;  # Allows only requests from localhost (127.0.0.1).
        deny all;  # Denies all other requests.
{{ end }}
        proxy_read_timeout 1s;  # Sets a 1-second timeout for reading the response from the proxied server.
        proxy_pass "http://127.0.0.1:8084/nginx_status";  # Proxies requests to the NGINX status page running locally.
        proxy_pass_request_headers off;  # Disables passing of request headers to the proxied server.
        proxy_set_header Host $host;  # Sets the Host header for the proxied request to the original host.
    }
    
    add_header 'Access-Control-Allow-Origin' https://{{ .Values.projectIngressProxy.tls.proxyDomain }};  # Adds a header to allow cross-origin requests from a specific domain.
    add_header 'Strict-Transport-Security' 'max-age=31536000';  # Adds the Strict-Transport-Security header for enforcing HTTPS for a year.

{{ range $index, $service := .Values.projectIngressProxy.settings.javaServices }}  # Iterates over all Java services specified in the configuration.

    location /{{ regexReplaceAll ":\\d+" $service "" }}/actuator/prometheus {  # Defines a location block for the Prometheus metrics endpoint of each Java service.
        proxy_pass http://{{ $service }}/actuator/prometheus;  # Proxies requests to the /actuator/prometheus endpoint of the Java service.
        proxy_http_version 1.1;  # Uses HTTP/1.1 for the proxied requests.
        # Proxy headers
        proxy_set_header Host $host;  # Passes the Host header to the backend.
        proxy_set_header X-Real-IP $remote_addr;  # Passes the real client IP to the backend.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Passes the forwarded client IPs to the backend.
        proxy_set_header X-Forwarded-Proto $scheme;  # Passes the protocol (http or https) to the backend.
        # Disable buffering for real-time responses
        proxy_buffering off;  # Disables buffering for more responsive streaming.
        proxy_read_timeout 90s;  # Sets a longer timeout for proxying requests, especially for long-running processes.
    }
{{ end }}

# Checks if the 'javaApp1' service is configured in the Java services settings.
{{ if .Values.projectIngressProxy.settings.javaServices.javaApp1 }}

    # Redirect /welcome to /any_long_path/default/ without adding port 8443
    location = /welcome {  # A strict match for the /welcome URL path.
        return 302 https://{{ .Values.projectIngressProxy.tls.proxyDomain }}/any_long_path/default/login_page;  # Redirects the request to the login page without including the port in the URL.
    }

    # Proxy requests under /welcome to the backend service
    location /welcome {  # Defines a location block for the /welcome URL path.
        proxy_pass http://{{ .Values.projectIngressProxy.settings.javaServices.javaApp1 }};  # Proxies the request to the backend Java service.
        proxy_http_version 1.1;  # Uses HTTP/1.1 for the proxied requests.
        include /usr/local/project/nginx/custom/conf/headers.txt;  # Includes the custom headers configuration file for proxy headers.
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;  # Supports WebSocket upgrade headers.
        proxy_set_header Connection "upgrade";  # Indicates the connection should be upgraded for WebSocket communication.
        # Disable buffering for real-time responses
        proxy_buffering off;  # Disables buffering for better real-time performance.
        proxy_read_timeout 90s;  # Sets a timeout for reading the response.
    }

    location /rest-api/ {  # Defines a location block for the /rest-api/ URL path.
        proxy_pass http://{{ .Values.projectIngressProxy.settings.javaServices.javaApp1 }}/rest-api/;  # Proxies the request to the backend Java service under the /rest-api/ path.
        proxy_http_version 1.1;  # Uses HTTP/1.1 for the proxied requests.
        include /usr/local/project/nginx/custom/conf/headers.txt;  # Includes the custom headers configuration file for proxy headers.
        # proxy_set_header Authorization "Bearer $cookie_JWT";  # Optionally passes a JWT token in the Authorization header.
        proxy_set_header Authorization $http_authorization;  # Passes the original Authorization header to the backend.
        # Additional proxy settings
        proxy_buffering off;  # Disables buffering for more real-time responses.
        proxy_read_timeout 90s;  # Increases the timeout for longer-running tasks.
    }
{{ end }}

    error_page 400 403 404 40x.html;  # Defines custom error pages for 400, 403, and 404 errors.
    location /40x.html {  # Defines a location block for the custom 40x error page.
      return 400 "400 Bad request";  # Returns a custom 400 error message.
    }
    
    error_page 500 502 503 504 /50x.html;  # Defines custom error pages for server errors (500, 502, 503, 504).
    location /50x.html {  # Defines a location block for the custom 50x error page.
      return 503 "503 Something went wrong";  # Returns a custom 503 error message.
    }
}
